/*

int findMinVertex(int* distance, bool* visited, int n) {
    int minVertex = -1;
    for(int i = 0; i < n; i++) {
        if(!visited[i] && (minVertex == -1 || distance[i] < distance[minVertex])) {
            minVertex = i;
        }
    }
    return minVertex;
}

void dijkstra(int** edges, int n) {
    int* distance = new int[n];
    bool* visited = new bool[n];
    for(int i = 0; i < n; i++) {
        distance[i] = INT_MAX;
        visited[i] = false;
    }
    distance[0] = 0;
    for(int i = 0; i < n-1; i++) {
        int minVertex = findMinVertex(distance, visited, n);
        visited[minVertex] = true;
        for(int j = 0; j < n; j++) {
            if(edges[minVertex][j] && !visited[j] ) {
                int dest = distance[minVertex] + edges[minVertex][j];
                if(dest < distance[j]) {
                    distance[j] = dest;
                }
            }
        }
    }
    
    for(int i = 0; i < n; i++) {
        cout << i << " " << distance[i] << endl;
    }
}

int main() {
    int V, E;
    cin >> V >> E;
    int** edges = new int*[V];
    for(int i = 0; i < V; i++) {
        edges[i] = new int[V];
        for(int j = 0; j < V; j++) {
            edges[i][j] = 0;
        }
    }
    
    for(int i = 0; i < E; i++) {
        int f, s, weight;
		cin >> f >> s >> weight;
		edges[f][s] = weight;
		edges[s][f] = weight;
    }
    
    dijkstra(edges, V);
    return 0;
}

*/